{
   "data" : {
      "y" : {
         "smps" : [
            "weight",
            "speed"
         ],
         "vars" : [
            "Var1",
            "Var2",
            "Var3",
            "Var4",
            "Var5",
            "Var6",
            "Var7",
            "Var8",
            "Var9",
            "Var10",
            "Var11",
            "Var12",
            "Var13",
            "Var14",
            "Var15",
            "Var16",
            "Var17",
            "Var18",
            "Var19",
            "Var20",
            "Var21",
            "Var22",
            "Var23",
            "Var24",
            "Var25",
            "Var26",
            "Var27",
            "Var28",
            "Var29",
            "Var30",
            "Var31",
            "Var32",
            "Var33",
            "Var34",
            "Var35",
            "Var36",
            "Var37",
            "Var38",
            "Var39",
            "Var40",
            "Var41",
            "Var42",
            "Var43",
            "Var44",
            "Var45",
            "Var46",
            "Var47",
            "Var48",
            "Var49",
            "Var50",
            "Var51",
            "Var52",
            "Var53",
            "Var54",
            "Var55",
            "Var56",
            "Var57",
            "Var58",
            "Var59",
            "Var60",
            "Var61",
            "Var62",
            "Var63",
            "Var64",
            "Var65",
            "Var66",
            "Var67",
            "Var68",
            "Var69",
            "Var70",
            "Var71",
            "Var72",
            "Var73",
            "Var74",
            "Var75",
            "Var76",
            "Var77",
            "Var78",
            "Var79",
            "Var80",
            "Var81",
            "Var82",
            "Var83",
            "Var84",
            "Var85",
            "Var86",
            "Var87",
            "Var88",
            "Var89",
            "Var90",
            "Var91",
            "Var92",
            "Var93",
            "Var94",
            "Var95",
            "Var96",
            "Var97",
            "Var98",
            "Var99",
            "Var100",
            "Var101",
            "Var102",
            "Var103",
            "Var104",
            "Var105",
            "Var106",
            "Var107"
         ],
         "data" : [
            [
               6000,
               35
            ],
            [
               4000,
               26
            ],
            [
               3000,
               25
            ],
            [
               1400,
               45
            ],
            [
               400,
               70
            ],
            [
               350,
               70
            ],
            [
               300,
               64
            ],
            [
               260,
               70
            ],
            [
               250,
               40
            ],
            [
               3800,
               25
            ],
            [
               1000,
               60
            ],
            [
               900,
               70
            ],
            [
               900,
               56
            ],
            [
               800,
               29
            ],
            [
               750,
               57
            ],
            [
               500,
               32
            ],
            [
               450,
               56
            ],
            [
               300,
               72
            ],
            [
               300,
               90
            ],
            [
               250,
               80
            ],
            [
               250,
               56
            ],
            [
               170,
               80
            ],
            [
               150,
               48
            ],
            [
               130,
               70
            ],
            [
               120,
               80
            ],
            [
               120,
               61
            ],
            [
               110,
               33
            ],
            [
               100,
               64
            ],
            [
               85,
               55
            ],
            [
               80,
               65
            ],
            [
               72,
               56
            ],
            [
               70,
               45
            ],
            [
               65,
               60
            ],
            [
               62,
               81
            ],
            [
               50,
               100
            ],
            [
               50,
               60
            ],
            [
               50,
               40
            ],
            [
               50,
               47
            ],
            [
               37,
               105
            ],
            [
               35,
               80
            ],
            [
               34,
               97
            ],
            [
               30,
               97
            ],
            [
               30,
               80
            ],
            [
               30,
               45
            ],
            [
               20,
               81
            ],
            [
               400,
               40
            ],
            [
               300,
               48
            ],
            [
               230,
               56
            ],
            [
               150,
               59
            ],
            [
               135,
               48
            ],
            [
               65,
               65
            ],
            [
               60,
               60
            ],
            [
               55,
               110
            ],
            [
               45,
               50
            ],
            [
               40,
               64
            ],
            [
               25,
               67
            ],
            [
               20,
               70
            ],
            [
               16,
               65
            ],
            [
               12,
               24
            ],
            [
               11,
               30
            ],
            [
               10,
               56
            ],
            [
               7,
               60
            ],
            [
               6,
               72
            ],
            [
               5,
               64
            ],
            [
               5,
               27
            ],
            [
               3,
               16
            ],
            [
               127,
               32
            ],
            [
               70,
               40
            ],
            [
               13,
               37
            ],
            [
               9,
               3.2
            ],
            [
               4,
               16
            ],
            [
               0.6,
               36
            ],
            [
               0.6,
               20
            ],
            [
               0.55,
               27
            ],
            [
               0.5,
               18
            ],
            [
               0.4,
               20
            ],
            [
               0.3,
               13
            ],
            [
               0.25,
               9.7
            ],
            [
               0.22,
               15
            ],
            [
               0.11,
               9
            ],
            [
               0.1,
               17
            ],
            [
               0.056,
               21
            ],
            [
               0.05,
               11
            ],
            [
               0.045,
               16
            ],
            [
               0.035,
               32
            ],
            [
               0.035,
               14
            ],
            [
               0.03,
               6.8
            ],
            [
               0.03,
               9.1
            ],
            [
               0.025,
               11
            ],
            [
               0.025,
               8.6
            ],
            [
               0.018,
               8.9
            ],
            [
               0.016,
               13
            ],
            [
               0.1,
               4
            ],
            [
               0.1,
               2.4
            ],
            [
               0.016,
               3.6
            ],
            [
               4.6,
               64
            ],
            [
               4.4,
               72
            ],
            [
               4,
               72
            ],
            [
               3.5,
               56
            ],
            [
               2,
               64
            ],
            [
               1.9,
               56
            ],
            [
               1.5,
               50
            ],
            [
               1.5,
               40
            ],
            [
               50,
               65
            ],
            [
               5,
               7.4
            ],
            [
               0.024,
               13
            ],
            [
               4,
               1.6
            ]
         ]
      },
      "z" : {
         "hoppers" : [
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "TRUE",
            "FALSE",
            "FALSE",
            "TRUE",
            "TRUE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "TRUE",
            "TRUE",
            "TRUE",
            "TRUE",
            "TRUE",
            "TRUE",
            "TRUE",
            "TRUE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE"
         ],
         "specials" : [
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "TRUE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "TRUE",
            "TRUE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "TRUE",
            "TRUE",
            "FALSE",
            "TRUE",
            "TRUE",
            "TRUE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "FALSE",
            "TRUE",
            "FALSE",
            "TRUE"
         ]
      }
   },
   "info" : "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n<script type=\"text/javascript\">\nconst macros = { \"\\\\R\": \"\\\\textsf{R}\", \"\\\\code\": \"\\\\texttt\"};\nfunction processMathHTML() {\n    var l = document.getElementsByClassName('reqn');\n    for (let e of l) { katex.render(e.textContent, e, { throwOnError: false, macros }); }\n    return;\n}</script>\n<script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.js\"\n    onload=\"processMathHTML();\"></script>\n<table style=\"width: 100%;\"><tr><td>Mammals</td><td style=\"text-align: right;\">R Documentation</td></tr></table>\n<h2>Garland(1983) Data on Running Speed of Mammals</h2>\n<h3>Description</h3>\n<p>Observations on the maximal running speed of mammal species\nand their body mass.\n</p>\n<h3>Usage</h3>\n<pre><code class='language-R'>data(Mammals)</code></pre>\n<h3>Format</h3>\n<p>A data frame with 107 observations on the following 4 variables.\n</p>\n<dl>\n<dt>weight</dt><dd><p>Body mass in Kg for &quot;typical adult sizes&quot;</p>\n</dd>\n<dt>speed</dt><dd><p>Maximal running speed (fastest sprint velocity on record)</p>\n</dd>\n<dt>hoppers</dt><dd><p>logical variable indicating animals that ambulate\nby hopping, e.g. kangaroos</p>\n</dd>\n<dt>specials</dt><dd><p>logical variable indicating special animals with\n&quot;lifestyles in which speed does not figure as an important\nfactor&quot;:  Hippopotamus, raccoon (Procyon), badger (Meles),\ncoati (Nasua), skunk (Mephitis), man (Homo), porcupine\n(Erithizon), oppossum (didelphis), and sloth (Bradypus)\n</p>\n</dd>\n</dl>\n<h3>Details</h3>\n<p>Used by Chappell (1989) and Koenker, Ng and Portnoy (1994) to\nillustrate the fitting of piecewise linear curves.\n</p>\n<h3>Source</h3>\n<p>Garland, T. (1983) The relation between maximal running speed and body \nmass in terrestrial mammals, <em>J. Zoology</em>, 199, 1557-1570.\n</p>\n<h3>References</h3>\n<p>Koenker, R., P. Ng and S. Portnoy, (1994)  Quantile Smoothing Splines&rdquo; \n<em>Biometrika</em>, 81, 673-680.\n</p>\n<p>Chappell, R. (1989) Fitting Bent Lines to Data, with Applications ot\nAllometry,  <em>J. Theo. Biology</em>, 138, 235-256.\n</p>\n<h3>See Also</h3>\n<p><code>rqss</code></p>\n<h3>Examples</h3>\n<pre><code class='language-R'>data(Mammals)\nattach(Mammals)\nx &lt;- log(weight)\ny &lt;- log(speed)\nplot(x,y, xlab=\"Weight in log(Kg)\", ylab=\"Speed in log(Km/hour)\",type=\"n\")\npoints(x[hoppers],y[hoppers],pch = \"h\", col=\"red\")\npoints(x[specials],y[specials],pch = \"s\", col=\"blue\")\nothers &lt;- (!hoppers &amp; !specials)\npoints(x[others],y[others], col=\"black\",cex = .75)\nfit &lt;- rqss(y ~ qss(x, lambda = 1),tau = .9)\nplot(fit)\n</code></pre>\n</main>\n</div>\n",
   "config" : {
      "title" : "Garland(1983) Data on Running Speed of Mammals",
      "shapeBy" : "specials",
      "colorBy" : "hoppers",
      "graphType" : "Scatter2D",
      "subtitle" : "quantreg - Mammals"
   }
}
