{
   "config" : {
      "graphType" : "Boxplot",
      "colorBy" : "variable",
      "groupingFactors" : [
         "dat"
      ],
      "title" : "Gapminder color schemes.",
      "segregateSamplesBy" : [
         null
      ],
      "subtitle" : "gapminder - country_colors"
   },
   "data" : {
      "y" : {
         "data" : [
            [
               1,
               2,
               3,
               4,
               5,
               6,
               7,
               8,
               9,
               10,
               11,
               12,
               13,
               14,
               15,
               16,
               17,
               18,
               19,
               20,
               21,
               22,
               23,
               24,
               25,
               26,
               27,
               28,
               29,
               30,
               31,
               32,
               33,
               34,
               35,
               36,
               37,
               38,
               39,
               40,
               41,
               42,
               43,
               44,
               45,
               46,
               47,
               48,
               49,
               50,
               51,
               52,
               53,
               54,
               55,
               56,
               57,
               58,
               59,
               60,
               61,
               62,
               63,
               64,
               65,
               66,
               67,
               68,
               69,
               70,
               71,
               72,
               73,
               74,
               75,
               76,
               77,
               78,
               79,
               80,
               81,
               82,
               83,
               84,
               85,
               86,
               87,
               88,
               89,
               90,
               91,
               92,
               93,
               94,
               95,
               96,
               97,
               98,
               99,
               100,
               101,
               102,
               103,
               104,
               105,
               106,
               107,
               108,
               109,
               110,
               111,
               112,
               113,
               114,
               115,
               116,
               117,
               118,
               119,
               120,
               121,
               122,
               123,
               124,
               125,
               126,
               127,
               128,
               129,
               130,
               131,
               132,
               133,
               134,
               135,
               136,
               137,
               138,
               139,
               140,
               141,
               142
            ]
         ],
         "smps" : [
            "Nigeria",
            "Egypt",
            "Ethiopia",
            "Congo, Dem. Rep.",
            "South Africa",
            "Sudan",
            "Tanzania",
            "Kenya",
            "Morocco",
            "Algeria",
            "Uganda",
            "Ghana",
            "Mozambique",
            "Madagascar",
            "Cote d'Ivoire",
            "Cameroon",
            "Burkina Faso",
            "Malawi",
            "Niger",
            "Angola",
            "Zimbabwe",
            "Senegal",
            "Mali",
            "Zambia",
            "Tunisia",
            "Chad",
            "Guinea",
            "Somalia",
            "Rwanda",
            "Burundi",
            "Benin",
            "Sierra Leone",
            "Libya",
            "Togo",
            "Eritrea",
            "Central African Republic",
            "Congo, Rep.",
            "Mauritania",
            "Liberia",
            "Namibia",
            "Lesotho",
            "Gambia",
            "Botswana",
            "Guinea-Bissau",
            "Gabon",
            "Mauritius",
            "Swaziland",
            "Reunion",
            "Comoros",
            "Equatorial Guinea",
            "Djibouti",
            "Sao Tome and Principe",
            "United States",
            "Brazil",
            "Mexico",
            "Colombia",
            "Argentina",
            "Canada",
            "Peru",
            "Venezuela",
            "Chile",
            "Ecuador",
            "Guatemala",
            "Cuba",
            "Dominican Republic",
            "Bolivia",
            "Haiti",
            "Honduras",
            "El Salvador",
            "Paraguay",
            "Nicaragua",
            "Costa Rica",
            "Puerto Rico",
            "Uruguay",
            "Panama",
            "Jamaica",
            "Trinidad and Tobago",
            "China",
            "India",
            "Indonesia",
            "Pakistan",
            "Bangladesh",
            "Japan",
            "Philippines",
            "Vietnam",
            "Iran",
            "Thailand",
            "Korea, Rep.",
            "Myanmar",
            "Afghanistan",
            "Nepal",
            "Saudi Arabia",
            "Iraq",
            "Malaysia",
            "Korea, Dem. Rep.",
            "Taiwan",
            "Yemen, Rep.",
            "Sri Lanka",
            "Syria",
            "Cambodia",
            "Hong Kong, China",
            "Israel",
            "Jordan",
            "Singapore",
            "West Bank and Gaza",
            "Lebanon",
            "Oman",
            "Mongolia",
            "Kuwait",
            "Bahrain",
            "Germany",
            "Turkey",
            "France",
            "United Kingdom",
            "Italy",
            "Spain",
            "Poland",
            "Romania",
            "Netherlands",
            "Greece",
            "Hungary",
            "Portugal",
            "Belgium",
            "Serbia",
            "Czech Republic",
            "Sweden",
            "Bulgaria",
            "Austria",
            "Switzerland",
            "Denmark",
            "Slovak Republic",
            "Finland",
            "Norway",
            "Bosnia and Herzegovina",
            "Croatia",
            "Ireland",
            "Albania",
            "Slovenia",
            "Montenegro",
            "Iceland",
            "Australia",
            "New Zealand"
         ],
         "vars" : [
            "Row"
         ]
      },
      "x" : {
         "dat" : [
            "#7F3B08",
            "#833D07",
            "#873F07",
            "#8B4107",
            "#8F4407",
            "#934607",
            "#974807",
            "#9B4A06",
            "#9F4D06",
            "#A34F06",
            "#A75106",
            "#AB5406",
            "#AF5606",
            "#B35806",
            "#B75C07",
            "#BA5F08",
            "#BE6209",
            "#C2650A",
            "#C5690B",
            "#C96C0C",
            "#CC6F0D",
            "#D0730F",
            "#D37610",
            "#D77911",
            "#DA7D12",
            "#DE8013",
            "#E18417",
            "#E3881D",
            "#E58C23",
            "#E79029",
            "#EA952F",
            "#EC9936",
            "#EE9D3C",
            "#F1A142",
            "#F3A548",
            "#F5AA4E",
            "#F7AE55",
            "#FAB25B",
            "#FCB661",
            "#FDBA67",
            "#FDBD6E",
            "#FDC074",
            "#FDC37B",
            "#FDC681",
            "#FDCA88",
            "#FDCD8E",
            "#FDD095",
            "#FDD39B",
            "#FDD6A2",
            "#FDD9A8",
            "#FDDCAF",
            "#FEE0B6",
            "#A50026",
            "#AD0826",
            "#B51026",
            "#BE1826",
            "#C62026",
            "#CE2726",
            "#D73027",
            "#DB3A2B",
            "#E04430",
            "#E54E35",
            "#EA5839",
            "#EF623E",
            "#F46D43",
            "#F57748",
            "#F7824D",
            "#F88D51",
            "#FA9856",
            "#FBA35B",
            "#FDAE61",
            "#FDB668",
            "#FDBE70",
            "#FDC778",
            "#FDCF80",
            "#FDD788",
            "#FEE090",
            "#40004B",
            "#460552",
            "#4D0A59",
            "#540F60",
            "#5B1567",
            "#611A6D",
            "#681F75",
            "#6F247B",
            "#762A83",
            "#7A3288",
            "#7E3B8C",
            "#834492",
            "#874D96",
            "#8B559B",
            "#905EA1",
            "#9467A5",
            "#9970AB",
            "#9E76AF",
            "#A37DB3",
            "#A883B8",
            "#AD8ABD",
            "#B291C1",
            "#B797C6",
            "#BC9ECA",
            "#C2A5CF",
            "#C6AAD2",
            "#CBB0D5",
            "#CFB6D8",
            "#D4BCDB",
            "#D9C2DE",
            "#DDC8E1",
            "#E2CEE4",
            "#E7D4E8",
            "#276419",
            "#2C6A1A",
            "#31701B",
            "#36771C",
            "#3B7D1D",
            "#41831E",
            "#468A1F",
            "#4B9020",
            "#529624",
            "#599C28",
            "#5FA12D",
            "#66A731",
            "#6DAD35",
            "#74B33A",
            "#7BB93E",
            "#82BE45",
            "#8AC34F",
            "#92C858",
            "#9ACD62",
            "#A2D26B",
            "#AAD875",
            "#B2DD7E",
            "#B9E188",
            "#BFE492",
            "#C6E79C",
            "#CCE9A7",
            "#D2ECB1",
            "#D9EFBB",
            "#DFF2C5",
            "#E6F5D0",
            "#313695",
            "#4575B4"
         ]
      }
   },
   "info" : "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n<script type=\"text/javascript\">\nconst macros = { \"\\\\R\": \"\\\\textsf{R}\", \"\\\\code\": \"\\\\texttt\"};\nfunction processMathHTML() {\n    var l = document.getElementsByClassName('reqn');\n    for (let e of l) { katex.render(e.textContent, e, { throwOnError: false, macros }); }\n    return;\n}</script>\n<script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.js\"\n    onload=\"processMathHTML();\"></script>\n<table style=\"width: 100%;\"><tr><td>country_colors</td><td style=\"text-align: right;\">R Documentation</td></tr></table>\n<h2>Gapminder color schemes.</h2>\n<h3>Description</h3>\n<p>Color schemes for the countries and continents in the Gapminder data.\n</p>\n<h3>Usage</h3>\n<pre><code class='language-R'>country_colors\n</code></pre>\n<h3>Format</h3>\n<p>Named character vectors giving country and continent colors:\n</p>\n<dl>\n<dt>country_colors</dt><dd><p>colors for the 142 countries</p>\n</dd>\n<dt>continent_colors</dt><dd><p>colors for the 5 continents</p>\n</dd>\n</dl>\n<h3>See Also</h3>\n<p><code>gapminder</code> for a description of the dataset\n</p>\n<h3>Examples</h3>\n<pre><code class='language-R'># ggplot2 examples are below these base graphics examples!\n# using country_colors with base graphics\n# for convenience, integrate the country colors into the data.frame\ngap_with_colors &lt;-\n  data.frame(gapminder,\n    cc = I(country_colors[match(\n      gapminder$country,\n      names(country_colors)\n# bubble plot, focus just on Africa and Europe in 2007\nkeepers &lt;- with(\n  gap_with_colors,\n  continent %in% c(\"Africa\", \"Europe\") &amp; year == 2007\nplot(lifeExp ~ gdpPercap, gap_with_colors,\n  subset = keepers, log = \"x\", pch = 21,\n  cex = sqrt(gap_with_colors$pop[keepers] / pi) / 1500,\n  bg = gap_with_colors$cc[keepers]\nif (require(ggplot2)) {\n  # with ggplot2, just provide country_colors to scale_color_manual():\n  # ... + scale_color_manual(values = country_colors) + ...\n  # simple line plot for 5 countries\n  h_countries &lt;- c(\"Egypt\", \"Haiti\", \"Romania\", \"Thailand\", \"Venezuela\")\n  h_dat &lt;- droplevels(subset(gapminder, country %in% h_countries))\n  h_dat$country &lt;- with(h_dat, reorder(country, lifeExp, max))\n  ggplot(h_dat, aes(x = year, y = lifeExp)) +\n    geom_line(aes(color = country)) +\n    scale_colour_manual(values = country_colors) +\n    guides(color = guide_legend(reverse = TRUE))\n  # spaghetti plot for lots of countries\n  ggplot(\n    subset(gapminder, continent != \"Oceania\"),\n    aes(x = year, y = lifeExp, group = country, color = country)\n    geom_line(lwd = 1, show_guide = FALSE) +\n    facet_wrap(~continent) +\n    scale_color_manual(values = country_colors) +\n    theme_bw() +\n    theme(strip.text = element_text(size = rel(1.1)))\n  # bubble plot for lots of countries\n  gap_bit &lt;- subset(gapminder, year == 2007 &amp; continent != \"Oceania\")\n  gap_bit &lt;- gap_bit[with(gap_bit, order(continent, -1 * pop)), ]\n  ggplot(gap_bit, aes(x = gdpPercap, y = lifeExp, size = pop)) +\n    scale_x_log10(limits = c(150, 115000)) +\n    ylim(c(16, 96)) +\n    geom_point(pch = 21, color = \"grey20\", show_guide = FALSE) +\n    scale_size_area(max_size = 40) +\n    facet_wrap(~continent) +\n    coord_fixed(ratio = 1 / 43) +\n    aes(fill = country) +\n    scale_fill_manual(values = country_colors) +\n    theme_bw() +\n    theme(strip.text = element_text(size = rel(1.1)))\n</code></pre>\n</main>\n</div>\n"
}
