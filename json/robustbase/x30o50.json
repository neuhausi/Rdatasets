{
   "config" : {
      "title" : "Extreme Data examples",
      "subtitle" : "robustbase - x30o50",
      "graphType" : "Treemap"
   },
   "info" : "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n<script type=\"text/javascript\">\nconst macros = { \"\\\\R\": \"\\\\textsf{R}\", \"\\\\code\": \"\\\\texttt\"};\nfunction processMathHTML() {\n    var l = document.getElementsByClassName('reqn');\n    for (let e of l) { katex.render(e.textContent, e, { throwOnError: false, macros }); }\n    return;\n}</script>\n<script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.js\"\n    onload=\"processMathHTML();\"></script>\n<table style=\"width: 100%;\"><tr><td>xtrData</td><td style=\"text-align: right;\">R Documentation</td></tr></table>\n<h2>Extreme Data examples</h2>\n<h3>Description</h3>\n<p><code>x30o50</code>, called &lsquo;'XX'&rsquo; in the thesis, has been a running\ncase for which <code>mc()</code> had failed to converge.\nA numeric vector of 50 values, 30 of which are very close to zero,\nspecifically, their absolute values are less than <code>1.5e-15</code>.\n</p>\n<p>The remaining 20 values (11 negative, 9 positive) have absolute values\nbetween 0.0022 and 1.66.\n</p>\n<h3>Usage</h3>\n<pre><code class='language-R'>data(x30o50, package=\"robustbase\")\n</code></pre>\n<h3>Format</h3>\n<p>A summary is </p>\n<pre>\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.\n-1.66006  0.00000  0.00000 -0.04155  0.00000  1.29768\n  </pre>\n<p>notably the 1st to 3rd quartiles are all very close to zero.\n</p>\n<h3>Details</h3>\n<p>a good robust method will treat the 60% &ldquo;almost zero&rdquo; values as\n&ldquo;good&rdquo; data and all other as outliers.\n</p>\n<p>This is somewhat counter intuitive to typical human perception where the\n30 almost-zero numbers would be considered as inliers and the remaining\n20 as &ldquo;good&rdquo; data.\n</p>\n<p>The original <code>mc()</code> algorithm and also the amendments up to 2022\n(<span class=\"pkg\">robustbase</span> versions before 0.95) would fail to converge unless (in\nnewer versions) <code>eps1</code> was increased, e.g., only by a factor of 10,\nto <code>eps1 = 1e-13</code>.\n</p>\n<h3>References</h3>\n<p>Lukas Graz (2021); unpublished BSc thesis, see <code>mc</code>.\n</p>\n<h3>Examples</h3>\n<pre><code class='language-R'>data(x30o50)\n## have 4  duplicated values :\ntable(dX &lt;- duplicated(x30o50))\n     x30o50[dX] # 0 2.77e-17 4.16e-17 2.08e-16\nsort(x30o50[dX]) * 2^56 #  0  2  3 15\n## and they are  c(0,2,3,15)*2^-56\ntable(sml &lt;- abs(x30o50) &lt; 1e-11)# 20 30\nsummary(x30o50[ sml]) # -1.082e-15 ... 1.499e-15 ; mean = 9.2e-19 ~~ 0\nsummary(x30o50[!sml])\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\n## -1.6601 -0.4689 -0.0550 -0.1039  0.3986  1.2977\nop &lt;- par(mfrow=c(3,1), mgp=c(1.5, .6, 0), mar = .3+c(2,3:1))\n(Fn. &lt;- ecdf(x30o50)) # &lt;- only 46 knots (as have 4 duplications)\nplot(Fn.) ## and zoom in (*drastically*) to around x=0 :\nfor(f in c(1e-13, 1.5e-15)) {\n  plot(Fn., xval=f*seq(-1,1, length.out = 1001), ylim=c(0,1), main=\"[zoomed in]\")\n  if(f == 1e-13) rect(-1e-15,0, +1e-15, 1, col=\"thistle\", border=1)\n  plot(Fn., add=TRUE)\npar(op)\nmcOld &lt;- function(x, ..., doScale=TRUE)  mc(x, doScale=doScale, c.huberize=Inf, ...)\ntry( mcOld(x30o50) ) # Error: .. not 'converged' in 100 iteration\nmcOld(x30o50, eps1 = 1e-12) # -0.152\n(mcX &lt;- mc(x30o50)) # -7.10849e-13\nstopifnot(exprs = {\n    all.equal(-7.10848988e-13, mcX, tol = 1e-9)\n    all.equal(mcX, mc(1e30*x30o50), tol = 4e-4) # not so close\ntable(sml &lt;- abs(x30o50) &lt; 1e-8)# 20 30\nrange(x30o50[sml])\nx0o50 &lt;- x30o50; x0o50[sml] &lt;- 0\n(mcX0 &lt;- mc(x0o50))\nstopifnot(exprs = {\n    all.equal(-0.378445401788, mcX0, tol=1e-12)\n    all.equal(-0.099275805349, mc(x30o50[!sml]) -&gt; mcL, tol=2e-11)\n    all.equal(mcL, mcOld(x30o50[!sml]))\n## -- some instability also wrt c.huberize:\nmcHubc &lt;- function(dat, ...)\n    function(cc) vapply(cc, function(c) mc(dat, c.huberize = c, ...), -1.)\nmcH50 &lt;- mcHubc(x30o50)\nhead(cHs &lt;- c(sort(outer(c(1, 2, 5), 10^(2:15))), Inf), 9)\nmcXc &lt;- mcH50(cHs)\nplot(  mcXc  ~ cHs, type=\"b\", log=\"x\" , xlab=quote(c[huberize]))\nplot((-mcXc) ~ cHs, type=\"b\", log=\"xy\", xlab=quote(c[huberize]))\n## but for \"regular\" outlier skew data, there's no such dependency:\nmcXcu &lt;- mcHubc(cushny)(cHs)\nstopifnot( abs(mcXcu - mcXcu[1]) &lt; 1e-15)\n</code></pre>\n</main>\n</div>\n",
   "data" : {
      "y" : {
         "vars" : [
            "dat"
         ],
         "smps" : [
            "Smp1",
            "Smp2",
            "Smp3",
            "Smp4",
            "Smp5",
            "Smp6",
            "Smp7",
            "Smp8",
            "Smp9",
            "Smp10",
            "Smp11",
            "Smp12",
            "Smp13",
            "Smp14",
            "Smp15",
            "Smp16",
            "Smp17",
            "Smp18",
            "Smp19",
            "Smp20",
            "Smp21",
            "Smp22",
            "Smp23",
            "Smp24",
            "Smp25",
            "Smp26",
            "Smp27",
            "Smp28",
            "Smp29",
            "Smp30",
            "Smp31",
            "Smp32",
            "Smp33",
            "Smp34",
            "Smp35",
            "Smp36",
            "Smp37",
            "Smp38",
            "Smp39",
            "Smp40",
            "Smp41",
            "Smp42",
            "Smp43",
            "Smp44",
            "Smp45",
            "Smp46",
            "Smp47",
            "Smp48",
            "Smp49",
            "Smp50"
         ],
         "data" : [
            [
               -5.82867087928207e-16,
               0.0372323129254644,
               0.356043544979642,
               1.66533453693773e-16,
               6.52256026967279e-16,
               0.526296698541494,
               -2.4980018054066e-16,
               4.16333634234434e-17,
               1.11022302462516e-16,
               2.08166817117217e-16,
               -0.377748610599456,
               -1.66006156960186,
               -6.93889390390723e-17,
               0.738336942056681,
               -1.52655665885959e-16,
               2.63677968348475e-16,
               2.22044604925031e-16,
               -0.00216903712661659,
               2.08166817117217e-16,
               -0.742490727951188,
               -0.107834829760757,
               -1.66533453693773e-16,
               -0.170789427371,
               2.77555756156289e-17,
               0.106966136590365,
               0,
               -4.16333634234434e-16,
               1.29768316990585,
               -0.334507260871883,
               -0.791478747295612,
               1.80411241501588e-16,
               -3.19189119579733e-16,
               0.0486237860406103,
               -9.71445146547012e-17,
               -2.91433543964104e-16,
               0.672635139909436,
               -1.08246744900953e-15,
               -0.30249430345201,
               0,
               1.49880108324396e-15,
               4.16333634234434e-17,
               -7.91033905045424e-16,
               -1.09629992838849,
               2.35922392732846e-16,
               4.85722573273506e-16,
               -1.16354204163649,
               0.887862637595705,
               -4.16333634234434e-17,
               -8.32667268468867e-17,
               2.77555756156289e-17
            ]
         ]
      }
   }
}
